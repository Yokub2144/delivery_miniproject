import 'dart:convert';
import 'dart:async';
import 'package:delivery_miniproject/pages/user/profilePage.dart'; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
import 'package:get/get.dart';
import 'package:longdo_maps_api3_flutter/longdo_maps_api3_flutter.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geolocator/geolocator.dart'; // ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß

class AddressModel {
  String id;
  String address;
  double latitude;
  double longitude;
  String label;

  AddressModel({
    required this.id,
    required this.address,
    required this.latitude,
    required this.longitude,
    this.label = '',
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'address': address,
      'latitude': latitude,
      'longitude': longitude,
      'label': label,
    };
  }

  factory AddressModel.fromMap(Map<String, dynamic> map) {
    return AddressModel(
      id: map['id'] ?? '',
      address: map['address'] ?? '',
      latitude: map['latitude']?.toDouble() ?? 0.0,
      longitude: map['longitude']?.toDouble() ?? 0.0,
      label: map['label'] ?? '',
    );
  }
}

class AddAddressPage extends StatefulWidget {
  final String userPhoneNumber;
  const AddAddressPage({super.key, required this.userPhoneNumber});

  @override
  State<AddAddressPage> createState() => _AddAddressPageState();
}

class _AddAddressPageState extends State<AddAddressPage> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final map = GlobalKey<LongdoMapState>();

  List<AddressModel> addresses = [];
  Map<String, AddressModel> markerIdToAddress = {};
  Map<String, dynamic> addressIdToMarkerObject = {};

  AddressModel? _selectedAddress;
  dynamic
  _currentLocationMarker; // <-- NEW: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏∏‡∏î "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"

  bool isLoading = false;
  bool isMapReady = false;

  final TextEditingController addressSearchController = TextEditingController();
  final TextEditingController addressController = TextEditingController();
  final TextEditingController labelController = TextEditingController();
  final FocusNode searchFocusNode = FocusNode();

  List<dynamic> searchSuggestions = [];
  bool showSuggestions = false;
  Timer? _debounce;

  @override
  void initState() {
    super.initState();
    addressSearchController.addListener(_onSearchChanged);
    searchFocusNode.addListener(_onFocusChanged);
  }

  @override
  void dispose() {
    _debounce?.cancel();
    addressSearchController.removeListener(_onSearchChanged);
    searchFocusNode.removeListener(_onFocusChanged);
    addressSearchController.dispose();
    addressController.dispose();
    labelController.dispose();
    searchFocusNode.dispose();
    super.dispose();
  }

  void _onFocusChanged() {
    if (!searchFocusNode.hasFocus && mounted) {
      Future.delayed(const Duration(milliseconds: 200), () {
        if (mounted) {
          setState(() {
            showSuggestions = false;
          });
        }
      });
    }
  }

  void _onSearchChanged() {
    if (_debounce?.isActive ?? false) _debounce!.cancel();

    if (addressSearchController.text.isEmpty) {
      if (mounted) {
        setState(() {
          searchSuggestions = [];
          showSuggestions = false;
        });
      }
      map.currentState?.call("Search.clear");
      return;
    }

    _debounce = Timer(const Duration(milliseconds: 500), () {
      if (isMapReady && addressSearchController.text.length >= 2) {
        _getSuggestions(addressSearchController.text);
      }
    });
  }

  Future<void> _getSuggestions(String keyword) async {
    if (!isMapReady) return;

    try {
      if (kDebugMode) {
        print('üîç Getting suggestions for: "$keyword"');
      }

      await map.currentState?.call("Search.suggest", args: [keyword]);

      if (kDebugMode) {
        print('üì• Suggest API called');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting suggestions: $e');
      }
    }
  }

  void _handleSuggestResult(dynamic message) {
    try {
      if (kDebugMode) {
        print('üì® Suggest result received');
        print('Raw message: ${message.message}');
      }

      final jsonObj = json.decode(message.message);
      final data = jsonObj['data'];

      if (kDebugMode) {
        print('Parsed data type: ${data.runtimeType}');
        print('Data content: $data');
      }

      if (data != null && data is List) {
        if (kDebugMode) {
          print('‚úÖ Suggestions count: ${data.length}');
        }

        if (mounted) {
          setState(() {
            searchSuggestions = data;
            showSuggestions = data.isNotEmpty && searchFocusNode.hasFocus;
          });
        }
      } else {
        if (kDebugMode) {
          print('‚ö†Ô∏è No suggestions data or wrong format');
        }
        if (mounted) {
          setState(() {
            searchSuggestions = [];
            showSuggestions = false;
          });
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error handling suggest result: $e');
      }
    }
  }

  void _selectSuggestion(dynamic suggestion) {
    try {
      final String? name = suggestion['w'];
      final double? lat = suggestion['lat']?.toDouble();
      final double? lon = suggestion['lon']?.toDouble();

      if (kDebugMode) {
        print('Selected: $name at ($lat, $lon)');
      }

      if (name != null) {
        addressSearchController.text = name;
      }

      if (mounted) {
        setState(() {
          showSuggestions = false;
          searchSuggestions = [];
        });
      }
      searchFocusNode.unfocus();

      if (lat != null && lon != null && isMapReady) {
        map.currentState?.call(
          "location",
          args: [
            {'lon': lon, 'lat': lat},
            true,
          ],
        );

        Future.delayed(const Duration(milliseconds: 400), () {
          map.currentState?.call("zoom", args: [16, true]);
        });
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error selecting suggestion: $e');
      }
    }
  }

  void _handleSearchResult(dynamic message) {
    try {
      if (kDebugMode) {
        print('üì® Search result received');
        print('Raw message: ${message.message}');
      }

      final jsonObj = json.decode(message.message);
      final data = jsonObj['data'];

      if (data != null && data is List && data.isNotEmpty) {
        if (kDebugMode) {
          print('‚úÖ Search results count: ${data.length}');
        }

        final firstResult = data[0];
        final double? lat = firstResult['lat']?.toDouble();
        final double? lon = firstResult['lon']?.toDouble();

        if (lat != null && lon != null && isMapReady) {
          map.currentState?.call(
            "location",
            args: [
              {'lon': lon, 'lat': lat},
              true,
            ],
          );

          Future.delayed(const Duration(milliseconds: 400), () {
            map.currentState?.call("zoom", args: [16, true]);
          });
        }
      } else {
        if (kDebugMode) {
          print('‚ö†Ô∏è No search results');
        }
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤')));
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error handling search result: $e');
      }
    }
  }

  // --- vvv MODIFIED FUNCTION vvv ---
  Future<void> _requestLocationPermission() async {
    if (!isMapReady) {
      if (kDebugMode) print('Map not ready, skipping location request.');
      return;
    }

    try {
      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Service
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        if (kDebugMode) print('Location services are disabled.');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î GPS (Location Services)')),
          );
        }
        return;
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Permission
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          if (kDebugMode) print('Location permissions are denied.');
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á')),
            );
          }
          return;
        }
      }

      if (permission == LocationPermission.deniedForever) {
        if (kDebugMode) print('Location permissions are permanently denied.');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏≤‡∏ß‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'),
            ),
          );
        }
        return;
      }

      // 3. ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
      if (kDebugMode) {
        print('Location Permission Granted. Fetching current location...');
      }
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...')),
      );

      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );

      if (kDebugMode) {
        print(
          'Location Fetched: Lat: ${position.latitude}, Lon: ${position.longitude}',
        );
      }

      if (!mounted) return; // <-- NEW: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á await

      // --- START: NEW CODE TO ADD MARKER ---

      // 5. ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" ‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (_currentLocationMarker != null) {
        try {
          await map.currentState?.call(
            "Overlays.remove",
            args: [_currentLocationMarker],
          );
          if (kDebugMode) print('Removed old current location marker.');
        } catch (e) {
          if (kDebugMode) print('Error removing old marker: $e');
        }
      }

      // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏î "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" ‡∏≠‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
      var marker = Longdo.LongdoObject(
        "Marker",
        args: [
          {'lon': position.longitude, 'lat': position.latitude},
          {
            'title': '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            'detail': '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',
            'icon': {
              'url':
                  'https://map.longdo.com/mmmap/images/pin_mark.png', // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ü‡πâ‡∏≤
              'width': 24,
              'height': 24,
              'offset': {'x': 12, 'y': 12}, // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
            },
          },
        ],
      );

      // 7. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
      await map.currentState?.call("Overlays.add", args: [marker]);

      // 8. ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
      setState(() {
        _currentLocationMarker = marker;
      });

      // --- END: NEW CODE ---

      // 4. ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
      await map.currentState?.call(
        "location",
        args: [
          {'lon': position.longitude, 'lat': position.latitude},
          true,
        ],
      );
      await Future.delayed(const Duration(milliseconds: 400));
      await map.currentState?.call("zoom", args: [16, true]); // ‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Error getting current location: $e');
      }
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: $e')),
        );
      }
    }
  }
  // --- ^^^ MODIFIED FUNCTION ^^^ ---

  Future<void> loadAddresses() async {
    try {
      if (!mounted) return;
      setState(() => isLoading = true);

      String? defaultId;

      final userDoc = await _firestore
          .collection('User')
          .doc(widget.userPhoneNumber)
          .get();

      if (userDoc.exists && userDoc.data() != null) {
        final userData = userDoc.data() as Map<String, dynamic>;
        defaultId = userData['defaultAddressId'] as String?;
      }

      final collection = await _firestore
          .collection('User')
          .doc(widget.userPhoneNumber)
          .collection('addresses')
          .get();

      final loadedAddresses = collection.docs
          .map((doc) => AddressModel.fromMap(doc.data()))
          .toList();

      AddressModel? defaultAddress;
      if (defaultId != null) {
        try {
          defaultAddress = loadedAddresses.firstWhere(
            (address) => address.id == defaultId,
          );
        } catch (e) {
          if (kDebugMode) {
            print('Default address ID $defaultId not found in sub-collection.');
          }
          defaultAddress = null;
        }
      }

      if (mounted) {
        setState(() {
          addresses = loadedAddresses;
          _selectedAddress = defaultAddress;
        });
      }

      if (isMapReady) {
        addMarkersToMap();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() => isLoading = false);
      }
    }
  }

  Future<void> addMarkersToMap() async {
    try {
      await map.currentState?.call("Overlays.clear");
      markerIdToAddress.clear();
      addressIdToMarkerObject.clear();
      _currentLocationMarker = null; // <-- NEW: ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢

      for (var address in addresses) {
        var marker = Longdo.LongdoObject(
          "Marker",
          args: [
            {'lon': address.longitude, 'lat': address.latitude},
            {
              'title': address.label.isNotEmpty ? address.label : '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
              'detail': address.address,
            },
          ],
        );
        await map.currentState?.call("Overlays.add", args: [marker]);

        final markerIdRaw = marker["\$id"];
        if (markerIdRaw != null) {
          final markerIdString = markerIdRaw.toString();
          markerIdToAddress[markerIdString] = address;
          addressIdToMarkerObject[address.id] = marker;
        }
      }

      if (kDebugMode) {
        print('--- addMarkersToMap complete ---');
        print('Total markers: ${addressIdToMarkerObject.length}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error adding markers: $e');
      }
    }
  }

  void _handleMapClick(dynamic message) {
    final jsonObj = json.decode(message.message);
    final data = jsonObj['data'];
    if (data == null) return;

    final double lat = data['lat']?.toDouble() ?? 0.0;
    final double lon = data['lon']?.toDouble() ?? 0.0;

    // <-- NEW: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡∏™‡∏µ‡∏ü‡πâ‡∏≤ "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" ‡∏≠‡∏≠‡∏Å
    if (_currentLocationMarker != null) {
      map.currentState?.call("Overlays.remove", args: [_currentLocationMarker]);
      setState(() {
        _currentLocationMarker = null;
      });
    }
    // --- END NEW ---

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${lat.toStringAsFixed(6)}, ${lon.toStringAsFixed(6)}',
                style: const TextStyle(fontSize: 12),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: labelController,
                decoration: const InputDecoration(
                  labelText: '‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô, ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 12),
              TextField(
                controller: addressController,
                maxLines: 3,
                decoration: const InputDecoration(
                  labelText: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              addressController.clear();
              labelController.clear();
              Navigator.pop(context);
            },
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          TextButton(
            onPressed: () async {
              if (addressController.text.isNotEmpty) {
                await addAddress(
                  lat,
                  lon,
                  addressController.text,
                  labelController.text,
                );
                addressController.clear();
                labelController.clear();
                Navigator.pop(context);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà')),
                );
              }
            },
            child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'),
          ),
        ],
      ),
    );
  }

  void _handleOverlayClick(dynamic message) {
    final jsonObj = json.decode(message.message);
    final clickedMarkerObject = jsonObj['data'];
    if (clickedMarkerObject == null) return;

    final markerIdRaw = clickedMarkerObject['\$id'];
    if (markerIdRaw == null) return;
    final markerIdString = markerIdRaw.toString();

    // <-- MODIFIED: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final addressToDelete = markerIdToAddress[markerIdString];

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏∏‡∏î‡∏™‡∏µ‡∏ü‡πâ‡∏≤) ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏¢
    if (addressToDelete == null) {
      if (kDebugMode)
        print(
          'Clicked on a non-address marker (e.g. current location). Doing nothing.',
        );
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö'),
        content: Text(
          '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà "${addressToDelete.label.isNotEmpty ? addressToDelete.label : '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          TextButton(
            onPressed: () {
              map.currentState?.call(
                "Overlays.remove",
                args: [clickedMarkerObject],
              );
              deleteAddress(addressToDelete.id);
              Navigator.pop(context);
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('‡∏•‡∏ö'),
          ),
        ],
      ),
    );
  }

  Future<void> addAddress(
    double latitude,
    double longitude,
    String address,
    String label,
  ) async {
    try {
      final newAddress = AddressModel(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        address: address,
        latitude: latitude,
        longitude: longitude,
        label: label,
      );

      await _firestore
          .collection('User')
          .doc(widget.userPhoneNumber)
          .collection('addresses')
          .doc(newAddress.id)
          .set(newAddress.toMap());

      if (mounted) {
        setState(() {
          addresses.add(newAddress);
          _selectedAddress = newAddress;
        });
      }

      if (isMapReady) {
        var marker = Longdo.LongdoObject(
          "Marker",
          args: [
            {'lon': longitude, 'lat': latitude},
            {'title': label.isNotEmpty ? label : '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', 'detail': address},
          ],
        );
        map.currentState?.call("Overlays.add", args: [marker]);
        final markerIdRaw = marker["\$id"];
        if (markerIdRaw != null) {
          final markerIdString = markerIdRaw.toString();
          markerIdToAddress[markerIdString] = newAddress;
          addressIdToMarkerObject[newAddress.id] = marker;
        }
      }

      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')));
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: $e')),
        );
      }
    }
  }

  Future<void> searchAddress() async {
    if (addressSearchController.text.isEmpty) return;

    if (mounted) {
      setState(() {
        showSuggestions = false;
      });
    }
    searchFocusNode.unfocus();

    try {
      if (isMapReady) {
        if (kDebugMode) {
          print('üîç Searching for: "${addressSearchController.text}"');
        }

        final script =
            '''
          (function() {
            var search = new longdo.Search();
            
            search.search('${addressSearchController.text}', function(data) {
              if (data && data.data) {
                SearchResult.postMessage(JSON.stringify({data: data.data}));
              }
            });
          })();
        ''';

        await map.currentState?.call("executeScript", args: [script]);

        if (kDebugMode) {
          print('üì• Search script executed');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Search error: $e');
      }
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')));
      }
    }
  }

  Future<void> deleteAddress(String addressId) async {
    try {
      await _firestore
          .collection('User')
          .doc(widget.userPhoneNumber)
          .collection('addresses')
          .doc(addressId)
          .delete();

      markerIdToAddress.removeWhere((key, value) => value.id == addressId);
      addressIdToMarkerObject.remove(addressId);
      if (mounted) {
        setState(() {
          addresses.removeWhere((address) => address.id == addressId);
          if (_selectedAddress?.id == addressId) {
            _selectedAddress = null;
          }
        });
      }

      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')));
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö: $e')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const Text(
          '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.deepPurple[400],
        elevation: 0,
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: addressSearchController,
                    focusNode: searchFocusNode,
                    decoration: InputDecoration(
                      hintText: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà...',
                      prefixIcon: const Icon(Icons.search),
                      suffixIcon: addressSearchController.text.isNotEmpty
                          ? IconButton(
                              icon: const Icon(Icons.clear, size: 20),
                              onPressed: () {
                                addressSearchController.clear();
                                map.currentState?.call("Search.clear");
                                setState(() {
                                  searchSuggestions = [];
                                  showSuggestions = false;
                                });
                              },
                            )
                          : null,
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      filled: true,
                      fillColor: Colors.white,
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 12,
                      ),
                    ),
                    onSubmitted: (value) => searchAddress(),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: searchAddress,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.deepPurple[400],
                    padding: const EdgeInsets.all(14),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: const Icon(Icons.search, color: Colors.white),
                ),
              ],
            ),
          ),
          Expanded(
            flex: 2,
            child: Stack(
              children: [
                LongdoMapWidget(
                  apiKey: "ba51dc98b3fd0dd3bb1ab2224a3e36d1",
                  key: map,
                  eventName: [
                    IJavascriptChannel(
                      name: "ready",
                      onMessageReceived: (message) {
                        if (kDebugMode) {
                          print('üó∫Ô∏è Map is ready');
                        }
                        if (mounted) {
                          setState(() {
                            isMapReady = true;
                          });
                        }
                        loadAddresses();
                        _requestLocationPermission();
                      },
                    ),
                    IJavascriptChannel(
                      name: "click",
                      onMessageReceived: _handleMapClick,
                    ),
                    IJavascriptChannel(
                      name: "overlayClick",
                      onMessageReceived: _handleOverlayClick,
                    ),
                    IJavascriptChannel(
                      name: "SuggestResult",
                      onMessageReceived: (message) {
                        if (kDebugMode) {
                          print('üéØ SuggestResult received!');
                        }
                        _handleSuggestResult(message);
                      },
                    ),
                    IJavascriptChannel(
                      name: "SearchResult",
                      onMessageReceived: (message) {
                        if (kDebugMode) {
                          print('üéØ SearchResult received!');
                        }
                        _handleSearchResult(message);
                      },
                    ),
                  ],
                ),
                // ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                Positioned(
                  bottom: 16,
                  right: 16,
                  child: FloatingActionButton(
                    heroTag: 'currentLocation',
                    onPressed: _requestLocationPermission,
                    backgroundColor: Colors.white,
                    elevation: 4,
                    child: Icon(
                      Icons.my_location,
                      color: Colors.deepPurple[400],
                      size: 28,
                    ),
                  ),
                ),
                // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                if (showSuggestions && searchSuggestions.isNotEmpty)
                  Positioned(
                    top: 0,
                    left: 12,
                    right: 12,
                    child: Material(
                      elevation: 8,
                      borderRadius: BorderRadius.circular(12),
                      child: Container(
                        constraints: const BoxConstraints(maxHeight: 300),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.grey.shade300),
                        ),
                        child: ListView.separated(
                          shrinkWrap: true,
                          padding: EdgeInsets.zero,
                          itemCount: searchSuggestions.length,
                          separatorBuilder: (context, index) => Divider(
                            height: 1,
                            thickness: 1,
                            color: Colors.grey.shade200,
                          ),
                          itemBuilder: (context, index) {
                            final suggestion = searchSuggestions[index];
                            final String name = suggestion['w'] ?? '';
                            final String? detail = suggestion['d'];

                            return InkWell(
                              onTap: () => _selectSuggestion(suggestion),
                              child: Padding(
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 12,
                                  vertical: 10,
                                ),
                                child: Row(
                                  children: [
                                    Icon(
                                      Icons.location_on,
                                      color: Colors.deepPurple[400],
                                      size: 20,
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        mainAxisSize: MainAxisSize.min,
                                        children: [
                                          Text(
                                            name,
                                            style: const TextStyle(
                                              fontSize: 14,
                                              fontWeight: FontWeight.w500,
                                            ),
                                          ),
                                          if (detail != null) ...[
                                            const SizedBox(height: 2),
                                            Text(
                                              detail,
                                              style: TextStyle(
                                                fontSize: 12,
                                                color: Colors.grey[600],
                                              ),
                                              maxLines: 1,
                                              overflow: TextOverflow.ellipsis,
                                            ),
                                          ],
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
            decoration: BoxDecoration(
              color: Colors.deepPurple[50],
              border: Border(
                top: BorderSide(color: Colors.deepPurple.shade100),
              ),
            ),
            child: Row(
              children: [
                Icon(
                  Icons.info_outline,
                  size: 18,
                  color: Colors.deepPurple[700],
                ),
                const SizedBox(width: 8),
                const Expanded(
                  child: Text(
                    '‡∏à‡∏¥‡πâ‡∏°‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ï‡∏∞‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö',
                    style: TextStyle(fontSize: 13, fontWeight: FontWeight.w500),
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            flex: 1,
            child: isLoading
                ? const Center(child: CircularProgressIndicator())
                : addresses.isEmpty
                ? const Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.location_off, size: 48, color: Colors.grey),
                        SizedBox(height: 12),
                        Text('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: addresses.length,
                    itemBuilder: (context, index) {
                      final address = addresses[index];
                      final isSelected =
                          _selectedAddress != null &&
                          _selectedAddress!.id == address.id;

                      return InkWell(
                        onTap: () async {
                          setState(() {
                            _selectedAddress = address;
                          });

                          if (!isMapReady) return;

                          final markerObject =
                              addressIdToMarkerObject[address.id];
                          if (markerObject == null) return;

                          try {
                            await map.currentState?.call("Popup.hide");
                            await map.currentState?.call(
                              "location",
                              args: [
                                {
                                  'lon': address.longitude,
                                  'lat': address.latitude,
                                },
                                true,
                              ],
                            );
                          } catch (e) {
                            if (kDebugMode) {
                              print('Error moving map to selected address: $e');
                            }
                          }
                        },
                        child: Container(
                          color: isSelected
                              ? Colors.deepPurple.shade100
                              : Colors.transparent,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 12,
                          ),
                          child: Row(
                            children: [
                              Icon(
                                address.label.toLowerCase().contains('‡∏ö‡πâ‡∏≤‡∏ô')
                                    ? Icons.home
                                    : address.label.toLowerCase().contains(
                                        '‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                                      )
                                    ? Icons.work
                                    : Icons.location_on,
                                color: Colors.deepPurple[400],
                              ),
                              const SizedBox(width: 16),
                              Expanded(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      address.label.isNotEmpty
                                          ? address.label
                                          : '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
                                      style: const TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                    const SizedBox(height: 4),
                                    Text(
                                      address.address,
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: Colors.grey[700],
                                      ),
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ],
                                ),
                              ),
                              if (isSelected)
                                Icon(
                                  Icons.check_circle,
                                  color: Colors.deepPurple[400],
                                ),
                            ],
                          ),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }
}
